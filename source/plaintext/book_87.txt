Whatagentbehavioursareofinterest?Whatdecisionsdotheagentsmake? What behaviours are being acted upon? What actions are being taken by the agents? 5. How do the agents interact with each other? With the environment? How expansive or focused are agent interactions? 6. Where might the data come from, especially on agent behaviours, for such a model? 7. How might you validate the model, especially the agent behaviours? Answering these questions is an essential part of the agent-based model design process. There are a variety of approaches to designing and implementing agent-based models. North and Macal (2007) discuss both design methodol- ogies and selected implementation environments in depth. Marsh and Hill (2008) offer an initial methodology for defining agent behaviours in an application for unmanned autonomous vehicles. Overall, bottom-up, highly iterative design methodologies seem to be the most effective for practical model development. Modern software (and model) development practices dictate that model design be independent of model implementation. That is, a good software (model) design should be able to be implemented in whatever computer language or coding scheme is selected. The communication of a model, its design assumptions, and detailed elements is essential if models are to be understood and reused by others than 24 CM Macal and MJ North their original developers. Grimm et al (2006) present a proposed standard protocol for describing agent-based and related models as a first step for establishing a more detailed common format. 4.2 Agent model implementation Agent-based modeling can be done using general, all-purpose software or programming languages, or it can be done using specially designed software and toolkits that address the special requirements of agent modeling. Agent modeling can be done in the small, on the desktop, or in the large, using large- scale computing cluster, or it can be done at any scale in-between these extremes. Projects often begin small, using one of the desktop ABMS tools, and then grow in stages into the larger-scale ABMS toolkits. Often one begins developing their first agent model using the approach that one is most familiar with, or the approach that one finds easiest to learn given their background and experience. We can distinguish implementation alternatives to building agent-based models on the basis of the software used. Spreadsheets, such as Microsoft Excel, in many ways offer the simplest approach to modeling. It is easier to develop models with spreadsheets than with many of the other tools, but the resulting models generally allow limited agent diversity, restrict agent behaviours, and have poor scalability compared to the other approaches. Some macro-level programming is also needed using the VBA language. General computational mathematics systems such as MATLAB and Mathematica, which many people may be already familiar with, can also be used quite successfully; however, these systems provide no specific capabilities for modeling agents. General programming languages such as Python, Java, and C++, and C also can be used, but development from scratch can be prohibitively expensive given that this would require the development of many of the available services already provided by specialized agent modeling tools. Most large-scale agent-based models use specialized tools, toolkits, or development environments based on reasons having to do with usability, ease of learning, cross-platform compatibility, and the need for sophisticated capabilities to connect to databases, graphical user interfaces and GIS. 4.3 Agent modeling services Regardless of the specific design methodology that is selected, a range of services is commonly required for implementing large-scale models that include real data and geo-spatial environments, which are becoming more prevalent. Some of the more common capabilities include project specification services; agent specification services; input data specification and storage services; model execution services; results storage and analysis services; and model packaging and distribution services. Project specification services provide a way for modelers to identify which sets of resources (eg files) constitute each model. There are three common Tutorial on agent-based modeling and simulation 25 approaches, depending on how much support the implementation environ- ment provides for the modeler: (1) the library-oriented approach, (2) the integrated development environment (IDE) approach, and (3) the hybrid approach. In the library-oriented approach to project specification, the agent modeling tool consists of a library of routines organized into an application program- ming interface (API). Modelers create models by making a series of calls to the various functions within the modeling toolkit. It is the responsibility of modelers to ensure that the correct call sequences are used and that all of the required files are present. In 