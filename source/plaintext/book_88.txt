exchange, modelers have great flexibility in the way that they define their models. Examples include the Java archives (JAR) used by Repast for Java (North et al, 2006; ROAD, 2009) or MASON (GMU, 2009); the binary libraries used by Swarm (SDG, 2009); and the Microsoft.NET assemblies used by Repast for the Microsoft.NET framework (North et al, 2006; ROAD, 2009). The IDE approach to project specification uses a code or model editing program to organize model construction. IDE’s also provide a built-in mechanism to compile or interpret and then execute models. There are several options including combined ‘one file’ IDEs, factored multiple-file IDEs, and hybrid approaches. Combined ‘one file’ IDEs use a single file to describe each model. An example is NetLogo (Wilensky, 1999; NetLogo, 2009). These systems are often quite easy to initially learn and use, but do not always scale well to larger and more complex models as compared to the other project specification approaches. The scalability issues include difficulties supporting team develop- ment, difficulties with editing increasingly large model files, and difficulties in organizing and reorganizing model code as it grows. Factored multiple-file IDEs use a set of files to describe each model. They usually include some type of built- in file manager along with the editor. Factored multiple-file IDEs can use either custom development environments which are specially built for a given agent platform; standards-based environments such as Eclipse (Eclipse Foundation, 2009), or a mixture of custom and standards-based environ 