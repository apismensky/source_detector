generator (SELG). The SES would work with the other system components to retrieve data to be deleted (this would operate using a FIFO queuing system). The SES would send a series of requests for data to the other system components. These requests would include the full path to the fle to be deleted; the start point of deletion (this was based on temporal parameters); and the end point of deletion (using temporal parameters to calculate the fnal block of video data to be erased in each session). The SEEA would then work on the data to ensure it was overwritten and completely irretrievable from within the system. Overwriting was designed to try and ensure that data could not be retrieved from within the system and provide accountable certainty for its non-status. The project participants hoped that they could demonstrate that overwriting had taken place and that the data had become irretrievable. In place of conventional deletion whereby data access routes would be cut, overwriting became the basis for expunging data from the system (although in practice this turned into something closer to corrupting than expunging the data as expunging proved technically diffcult to automate). The SEEA would then check that deletion was successful by matching the content deleted with that selected by the SES. After deletion, the SELG would then produce a log of data deleted. The log would include the fle names of deleted objects, the time taken to delete and the form of overwriting that had been applied. The SELG would act as the key component for producing accountable certainty 88 D. NEYLAND of nothing—that the data to be deleted was now deleted—as well as something—the account of nothing. To make an accountable something from nothing, an external viewer component would parse the log to make it readable by humans and then a human system administrator could audit the log and check it against expectations of how much data should have been deleted (e.g. by comparing how much data had been deleted against how much data passed through the system on average every 24 hours) and whether any traces had been left (of either video streams or metadata relating to, for example, object classifcation or bounding boxes). Events which had been the subject of an alert to operatives would be reviewed manually on a regular basis and then also moved into the SEM for deletion as necessary. The audit log provided a basis for demonstrating within the project that deletion was working. As an internal accountability mechanism it could become a means to see that the algorithm was limited, that further judgements could not be made on the corpus of video-based data that would now be unavailable. In this sense, accountability (in the form of a data log) ought to provide the means to transform nothing (the deleted) into something (proof of deletion) and to do so in an orderly and certain manner. The log bore the responsibility for accountable action and for achieving the project’s ethical aims. However, the results derived from system testing suggested deletion would be anything but straightforward. In tests carried out ‘live’ in the airport, designed to act as a demonstration of system capabilities for potential users (airport security operatives), video frames and metadata were not gathered in their entirety, orphan frames were left behind on the system, and the reporting tool merely produced a continual accountable output of partial failure. Problems particularly appeared during secure auto-deletion; it was in the moment that data should be corrupted and made irretrievable that some data evaded the system’s grasp. The computer scientists involved in the project could get the system to auto-delete the system fles in their entirety by using an insecure deletion protocol (which effectively involved a conventional approach to deletion, changing the routes via which data could be accessed) or by dropping auto-deletion and carrying out a manual corruption process (which might prove more complete but also require more work). The elegant solution of automatic, accountable deletion remained out of reach. This would prove important in efforts to establish the market value of the technology (see Chapter 6), but also somewhat pre-empted the chaotic scenes of demonstration that the entire system began to experience as it moved outside its initial experimental 4 THE DELETING MACHINE AND ITS DISCONTENTS 89 phase (see Chapter 5). Everyday life and the algorithmic system did not see eye to eye. Work to build the algorithmic deleting machine and constitute an ordered and certain accountable nothing, a notable absence, instead became the basis for establishing a precarious kind of uncertain presence. Orphan frames and the audit log continually generated a disorderly account of something instead of nothing, a blank fgure (Hetherington and Lee 2000) that paid recognition to the terms of its own order (that it should fnd and prove the existence of nothing), but also 